REORGANIZATION PLAN: SEPARATE RUN.SH FOR EACH FOLDER
=====================================================

IMPORTANT CONSTRAINTS:
- DO NOT modify any existing scripts in the codebase
- DO NOT touch/edit any .sh files that already exist
- ONLY create new run.sh files where they don't exist
- PRESERVE all existing scripts as-is

OBJECTIVE:
Create individual run.sh files for each functional folder to organize execution flow
and improve modularity while maintaining backward compatibility.

CURRENT STATE:
- Single main run.sh handles all 30+ operations across all folders
- Some folders already have menu scripts (backup_restore, mysql, rclone, troubleshooting)
- All scripts are called directly from main run.sh

PROPOSED STRUCTURE:
==================

1. FOLDER-SPECIFIC RUN.SH FILES:
--------------------------------

apache/run.sh
  Menu Options:
  1. Install Apache + SSL Only (install_ssl_only.sh)
  2. Fix Apache Configurations (fix_configs.sh)
  CLI Commands: ssl, fixapache

backup_restore/run.sh (NEW - keep backup_restore_menu.sh untouched)
  Menu Options:
  1. Backup WordPress Sites (backup_wordpress.sh)
  2. Restore WordPress Sites (restore_wordpress.sh) 
  3. Transfer Backups to Cloud (transfer_backups.sh)
  4. Backup PostgreSQL (backup_postgresql.sh)
  5. Restore PostgreSQL (restore_postgresql.sh)
  CLI Commands: backup, restore, transfer, pgbackup, pgrestore

mysql/run.sh (NEW - keep remote_access_menu.sh untouched)
  Menu Options:
  1. Configure Remote Access (remote_access.sh)
  2. Check Remote Access Status (check_remote_access.sh)
  3. Show Databases (show_databases.sh)
  4. List Users (list_users.sh)
  5. Get Database Size (get_database_size.sh)
  6. Install phpMyAdmin (install_phpmyadmin.sh)
  7. Enable Auto Log Purging (enable_auto_log_purging.sh)
  CLI Commands: remote, checkdb, showdb, users, dbsize, phpmyadmin, purge

php/run.sh (new)
  Menu Options:
  1. Adjust PHP Settings (adjust_settings.sh)
  2. View PHP Information (view_info.sh)
  CLI Commands: adjust, info

rclone/run.sh (NEW - keep rclone_menu.sh untouched)
  Menu Options:
  1. Install Rclone Package (install_package.sh)
  2. Manage Remote Storage (manage_remote.sh)
  3. Show Configured Remotes (show_remotes.sh)
  4. Check Rclone Status (show_status.sh)
  5. Setup Backup Automation (setup_backup_cron.sh)
  6. Uninstall Rclone (uninstall_package.sh)
  CLI Commands: install, manage, remotes, status, cron, uninstall

redis/run.sh (new)
  Menu Options:
  1. Configure Redis Cache (configure.sh)
  CLI Commands: configure

system/run.sh (new)
  Menu Options:
  1. System Status Check (status_check.sh)
  2. Disk Space Monitor (disk_space_monitor.sh)
  3. Toggle Root SSH Access (toggle_root_ssh.sh)
  4. Install System Utilities (install_utilities.sh)
  CLI Commands: status, disk, ssh, utils

troubleshooting/run.sh (NEW - keep troubleshooting_menu.sh untouched)
  Menu Options:
  (Keep existing troubleshooting menu structure)
  CLI Commands: troubleshoot, fix

wordpress/run.sh (new)
  Menu Options:
  1. Install LAMP Stack + WordPress (install_lamp_stack.sh)
  2. Remove Websites & Databases (remove_websites_databases.sh)
  3. Remove Orphaned Databases (remove_orphaned_databases.sh)
  CLI Commands: install, remove, cleanup

2. NEW MAIN RUN.SH (don't modify existing run.sh until tested):
-----------------------
- Transform into a high-level category menu
- Each category calls the respective folder's run.sh
- Maintain backward compatibility for existing CLI commands
- Add new category-based CLI commands

Main Menu Structure:
1. WordPress Management      -> wordpress/run.sh
2. Backup & Restore         -> backup_restore/run.sh
3. MySQL Database           -> mysql/run.sh
4. PHP Configuration        -> php/run.sh
5. Apache Web Server        -> apache/run.sh
6. System Management        -> system/run.sh
7. Cloud Storage (Rclone)   -> rclone/run.sh
8. Redis Cache             -> redis/run.sh
9. Troubleshooting         -> troubleshooting/run.sh

3. COMMON UTILITIES (FROM TESTED OLD RUN.SH):
----------------------------------------------
Each folder's run.sh will include ALL tested functions from the current run.sh:

REQUIRED FUNCTIONS TO COPY:
- Color definitions: RED, GREEN, YELLOW, BLUE, CYAN, NC
- Log file setup: LOG_FILE="/var/log/wordpress_master_$(date +%Y%m%d_%H%M%S).log"
- Script directory: SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"

UTILITY FUNCTIONS (tested and working):
- log() { echo "[$1] $2" | tee -a "$LOG_FILE"; }
- error() { log "ERROR" "$1"; echo -e "${RED}Error: $1${NC}" >&2; exit 1; }
- success() { log "SUCCESS" "$1"; echo -e "${GREEN}✓ $1${NC}"; }
- info() { log "INFO" "$1"; echo -e "${BLUE}ℹ $1${NC}"; }
- warn() { log "WARNING" "$1"; echo -e "${YELLOW}⚠ $1${NC}"; }
- confirm() { read -p "$(echo -e "${CYAN}$1 [Y/n]: ${NC}")" -n 1 -r; echo; [[ -z "$REPLY" || $REPLY =~ ^[Yy]$ ]]; }

SYSTEM CHECKS:
- check_root() { [[ $EUID -ne 0 ]] && error "This script must be run as root (use sudo)"; }

SCRIPT EXECUTION HANDLER (critical - must be identical):
- execute_script() function with:
  * Script path validation
  * Permission checking (chmod +x if needed)
  * Directory change handling (cd to SCRIPT_DIR and back)
  * Exit code handling
  * Success/failure logging
  * "Press Enter to continue..." prompt

MENU STRUCTURE:
- show_header() function (adapted for each folder)
- show_menu() function (specific to each folder's operations)
- handle_cli_command() function for CLI argument processing
- main() function with root check and menu loop

IMPORTANT: These functions have been tested and proven to work correctly.
DO NOT modify the function implementations, only adapt menu content.

4. IMPLEMENTATION STEPS:
------------------------
Step 1: Create template with all tested functions from old run.sh
Step 2: Create NEW run.sh files for ALL folders:
       - apache/run.sh (NEW file)
       - backup_restore/run.sh (NEW file - don't touch backup_restore_menu.sh)
       - mysql/run.sh (NEW file - don't touch remote_access_menu.sh)
       - php/run.sh (NEW file)
       - rclone/run.sh (NEW file - don't touch rclone_menu.sh)
       - redis/run.sh (NEW file)
       - system/run.sh (NEW file)
       - troubleshooting/run.sh (NEW file - don't touch troubleshooting_menu.sh)
       - wordpress/run.sh (NEW file)
Step 3: Each new run.sh will:
       - Copy ALL utility functions from main run.sh (no modifications)
       - Call existing scripts without modifying them
       - Provide menu interface for folder-specific operations
Step 4: Create NEW main run.sh that:
       - Calls folder-specific run.sh files
       - Maintains backward compatibility
       - Does NOT modify existing functionality
Step 5: Test that all operations work through new run.sh files
Step 6: Only after testing, optionally replace old run.sh with new one

CRITICAL NOTES:
- DO NOT modify any existing .sh files in the codebase
- The execute_script() function MUST remain identical as it handles:
- Script path validation and error handling
- Permission management (chmod +x)
- Working directory management (cd to SCRIPT_DIR and back)
- Exit code capture and reporting
- User interaction ("Press Enter to continue...")

5. FILES TO BE CREATED (NEW FILES ONLY):
-----------------------------------------
- apache/run.sh (NEW)
- backup_restore/run.sh (NEW)
- mysql/run.sh (NEW)
- php/run.sh (NEW)
- rclone/run.sh (NEW)
- redis/run.sh (NEW)
- system/run.sh (NEW)
- troubleshooting/run.sh (NEW)
- wordpress/run.sh (NEW)
- run_new.sh (NEW - test version of main run.sh)

EXISTING FILES (DO NOT MODIFY):
- All existing .sh scripts remain untouched
- backup_restore/backup_restore_menu.sh (keep as-is)
- mysql/remote_access_menu.sh (keep as-is)
- rclone/rclone_menu.sh (keep as-is)
- troubleshooting/troubleshooting_menu.sh (keep as-is)
- Current run.sh (keep until new system is tested)

6. BENEFITS:
------------
- Better organization and modularity
- Easier maintenance per functional area
- Cleaner main menu with categories
- Ability to run folder-specific operations independently
- Maintains full backward compatibility
- Reduces complexity of main run.sh

7. BACKWARD COMPATIBILITY:
--------------------------
Main run.sh will maintain all existing CLI commands by:
- Detecting old-style commands and routing to appropriate folder/run.sh
- Supporting both old direct commands and new category-based commands
Example: 
  ./run.sh lamp -> wordpress/run.sh install
  ./run.sh wordpress install -> wordpress/run.sh install

8. NEW CLI USAGE PATTERNS:
--------------------------
Current: ./run.sh lamp
New:     ./run.sh wordpress install
         ./wordpress/run.sh install
         
Current: ./run.sh backup
New:     ./run.sh backup-restore backup
         ./backup_restore/run.sh backup

9. TEMPLATE STRUCTURE FOR EACH FOLDER'S RUN.SH:
------------------------------------------------
#!/bin/bash

# SECTION 1: EXACT COPY FROM OLD RUN.SH (DO NOT MODIFY)
# Colors and globals
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; CYAN='\033[0;36m'; NC='\033[0m'
LOG_FILE="/var/log/wordpress_master_$(date +%Y%m%d_%H%M%S).log"
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"

# Utility functions (EXACT COPY)
log() { echo "[$1] $2" | tee -a "$LOG_FILE"; }
error() { log "ERROR" "$1"; echo -e "${RED}Error: $1${NC}" >&2; exit 1; }
success() { log "SUCCESS" "$1"; echo -e "${GREEN}✓ $1${NC}"; }
info() { log "INFO" "$1"; echo -e "${BLUE}ℹ $1${NC}"; }
warn() { log "WARNING" "$1"; echo -e "${YELLOW}⚠ $1${NC}"; }
confirm() { read -p "$(echo -e "${CYAN}$1 [Y/n]: ${NC}")" -n 1 -r; echo; [[ -z "$REPLY" || $REPLY =~ ^[Yy]$ ]]; }

# System checks (EXACT COPY)
check_root() { [[ $EUID -ne 0 ]] && error "This script must be run as root (use sudo)"; }

# Execute script with error handling (EXACT COPY - CRITICAL)
execute_script() {
    local script_path="$1"
    local script_name="$2"
    
    if [ ! -f "$script_path" ]; then
        error "Script not found: $script_path"
        return 1
    fi
    
    if [ ! -x "$script_path" ]; then
        chmod +x "$script_path"
    fi
    
    info "Launching $script_name..."
    
    # Change to script directory and run, then return to original directory
    local original_dir="$(pwd)"
    cd "$SCRIPT_DIR"
    bash "$script_path"
    local exit_code=$?
    cd "$original_dir"
    
    if [ $exit_code -eq 0 ]; then
        success "$script_name completed successfully"
    else
        warn "$script_name exited with code $exit_code"
    fi
    
    read -p "Press Enter to continue..."
    return $exit_code
}

# SECTION 2: FOLDER-SPECIFIC CONTENT (CUSTOMIZE PER FOLDER)
# show_header() - Customize title for each folder
# show_menu() - Folder-specific menu options
# handle_cli_command() - Folder-specific CLI commands
# main() - Standard structure with folder-specific menu loop

10. TESTING REQUIREMENTS:
------------------------
- Test all existing CLI commands work via main run.sh
- Test new category-based navigation
- Test direct folder run.sh execution
- Verify logging works correctly from all levels
- Ensure proper error handling and script execution
- Verify execute_script() function works identically to old version
- Check that "Press Enter to continue..." works after each script
- Confirm working directory returns to original after script execution